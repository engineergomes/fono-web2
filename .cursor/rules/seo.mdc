---
description: >
globs: 
alwaysApply: true
---

## üöÄ SEO Rule (Google 2025 ‚Äì Next.js Metadata)

### 1. Rendering
- Prefira **SSG/ISR** (`generateStaticParams`, `revalidate`) para p√°ginas de marketing/blog.
- Use **SSR** (`dynamic = "force-dynamic"` ou `getServerSideProps`) apenas quando necess√°rio.
- Garanta que conte√∫do cr√≠tico esteja no HTML inicial; evite ‚Äúrender after hydration‚Äù.

### 2. Metadata API
```ts
// Exemplo para p√°gina est√°tica  ‚îÄ app/(marketing)/page.tsx
export const metadata = {
  title: "FastWidgets ‚Äì High-Quality Widgets for Modern Homes",
  description:
    "FastWidgets oferece widgets de alta qualidade e pre√ßo acess√≠vel para modernizar sua casa.",
  alternates: { canonical: "https://example.com" },
  openGraph: {
    title: "FastWidgets ‚Äì High-Quality Widgets",
    description: "Descubra por que nossos widgets s√£o ideais para casas modernas.",
    url: "https://example.com",
    siteName: "FastWidgets",
    images: [{ url: "https://example.com/og-cover.jpg", width: 1200, height: 630 }],
    type: "website",
  },
  twitter: { card: "summary_large_image" },
  robots: { index: true, follow: true },
};
ts
Copiar
Editar
// Exemplo para p√°gina din√¢mica ‚îÄ app/blog/[slug]/page.tsx
import { getPost } from "@/lib/posts";
export async function generateMetadata({ params }) {
  const post = await getPost(params.slug);
  return {
    title: post.seoTitle ?? post.title,
    description: post.excerpt,
    alternates: { canonical: `https://example.com/blog/${post.slug}` },
    openGraph: {
      title: post.seoTitle ?? post.title,
      description: post.excerpt,
      url: `https://example.com/blog/${post.slug}`,
      images: [{ url: post.coverImage, width: 1200, height: 630 }],
      type: "article",
    },
  };
}
Nunca usar <meta name="keywords">.

3. Sem√¢ntica
Um √∫nico <h1> por p√°gina; seguir hierarquia <h2>, <h3>.

Utilizar <main>, <article>, <section>, <nav>, <footer>.

Todas as imagens devem ter alt descritivo e significativo.

4. Performance & Core Web Vitals
Fonts via next/font com display:"swap".

Imagens via next/image (lazy, width/height definidos).

Componentes fora do viewport: next/dynamic({ ssr:false }).

Scripts de terceiros: <Script strategy="lazyOnload" />.

Metas: LCP < 2.5 s, INP < 200 ms, CLS < 0.1.

5. URLs & Indexa√ß√£o
Rotas curtas, em kebab-case (/blog/nextjs-seo-tips).

Gerar public/sitemap.xml em cada build (com <lastmod>).

robots.txt ‚Üí Sitemap: https://example.com/sitemap.xml.

6. Internal Links
√Çncoras descritivas (‚Äúver planos de pre√ßos‚Äù, n√£o ‚Äúclique aqui‚Äù).

Usar schema BreadcrumbList quando fizer sentido.

7. CI Checks
next lint + eslint-plugin-jsx-a11y.

Executar Lighthouse/PSI no CI; falhar se CWV < ‚ÄúGood‚Äù.

8. Proibi√ß√µes
N√£o bloquear assets p√∫blicos em robots.txt.

N√£o duplicar p√°ginas sem <link rel="canonical">.

N√£o embutir imagens grandes em base64.